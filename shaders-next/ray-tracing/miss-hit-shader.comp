#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
//#define CACHE_HIT_PAYLOAD
#define DMA_HIT // unpreferred

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"
#include "./submodules/environment.glsl"

#define cray rays[rayID]
#define hid hitID // alias of

VtHitPayload hitp;
LOCAL_SIZE_LAYOUT;

#define wgs gl_NumWorkGroups.x
//#define wsize missHitTypedCounterRead[stageUniform.currentGroup]

void main() {
    const int wsize = min(missHitTypedCounterRead[stageUniform.currentGroup], MAX_HITS);
    IFALL (wsize <= 0) return;

    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    [[unroll, dependency_infinite]]
    for (uint w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        bool overflow = globalID >= wsize || globalID < 0;
        const int hitID = overflow ? -1 : vtMissId(globalID, stageUniform.currentGroup);

        IFALL(overflow) break;
        {
#ifdef DMA_HIT
            #define hit hits[hitID]
#else
            VtHitData hit = hits[hitID];
#endif

            const int rayID = hit.rayID-1;

            vec3 viewVec = dcts(cray.cdirect.xy);
            vec3 rorigin = cray.origin.xyz;
            globalInvocationSMP = globalID;

            // environment
            hitp.specularGlossiness = vec4(0.f.xxx, 1.f);
            hitp.albedo = vec4(0.f.xxx, 1.f);
            //EnvironmentShader(hitp.emission, cray);
            
            // ray direction debug emission
            //hitp.emission = vec4(viewVec*0.5f+0.5f, 1.f);
            //hitp.emission = vec4(toLinear(vec3(0.05f, 0.05f, 0.2f)), 1.f);
            hitp.emission = vec4(toLinear(vec3(135, 206, 235)/255.f.xxx), 1.f);
            //hitp.emission = vec4(toLinear(vec3(0.1f, 0.105f, 0.12f)), 1.f);

            // additional validation of hit (hit point interpolated offset test)
            [[flatten]] if (!overflow && rayID >= 0 && hitID >= 0) {
                imageAtomicMax(rayLink,rayID<<1,(hid+1).x);
                const int pid = atomicIncPayloadHitCount();
                
                hit.payloadID = pid+1;
#ifndef DMA_HIT
                hits[hitID] = hit;
#endif
                hitPayload[pid] = hitp;
            }
        }
    }
}
