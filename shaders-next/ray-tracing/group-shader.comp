#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"

// user descriptor set output image
layout ( rgba32f, binding = 2, set = 2 ) uniform image2D _devImages[4];
#define ColorOutput _devImages[0]
#define NormalPass _devImages[1]
#define OriginPass _devImages[2]
#define SpecularPass _devImages[3]

// use partition by 8x8
//layout (local_size_x = R_BLOCK_WIDTH, local_size_y = R_BLOCK_HEIGHT);
LOCAL_SIZE_LAYOUT;

#define wgs gl_NumWorkGroups.x
//#define wsize rayTypedCounterRead[stageUniform.currentGroup]

#define hitp hitPayload[hitpId]
#define hit hits[hitIdc]


// UNUSED: adaptive sample accumulation and super-sampling (i.e. High DPI production support by reducing samples per pixels, using generated resampling)
// Can seen in outdated "satellite" ray-tracer
// Also, we have another vision of "DPI-pixel-sampling" problem, so we can use sample locations for generation bigger images by progressing smaller count of samples
// papers: ???.pdf ( no direct equivalent )


shared VtRay lrays[WORK_SIZE];
#define ray lrays[Local_Idx]

// 
void main() {
    const int wsize = min(rayTypedCounterRead[stageUniform.currentGroup], MAX_RAYS); IFALL (wsize <= 0) return;
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    for (uint w=0;w<wcount;w+=wgs) {
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const int rayID = (globalID < MAX_RAYS ? rayGroupIndicesRead[globalID] : 0)-1;
        const bool overflow = globalID >= wsize || globalID < 0 || rayID < 0; IFALL(overflow) break;

        // get ray by id
        ray = rays[rayID];
        const int hitIdc = vtFetchHitIdc(rayID);
        const int hitpId = hits[hitIdc].payloadID-1;
        const vec4 diffuse = hitp.albedo, reflc = hitp.specularGlossiness;
        const float shiftLenght = hit.uvt.z*1e-3f;

        // get output image 2D coord
        const uvec2 ucoord = vtFetchIndex(rayID);
        const ivec2 icoord = ivec2(ucoord);

        // add support for multi-passing
         if (!overflow && rayID >= 0) {
            // reflection prior (early stage)
            const vec4 dcolor = vec4(f16_f32(ray.dcolor).xyz, 1.f), bcolor = imageLoad(ColorOutput, icoord);

            // get real origin of ray
            ray.origin.xyz = fma(dcts(ray.cdirect.xy), hit.uvt.zzz, ray.origin.xyz); 
            writeColor(ray.dcolor, vec4(0.f.xxx, 1.f));

            // alternate of http://www.cwyman.org/papers/i3d17_hashedAlpha.pdf
             float alph = diffuse.a >= hrand(uvec4(imageLoad(rayLink, (rayID<<1)|1).x, stageUniform.iteration, packHalf4x16(dcolor))) ? 1.f : 0.f;
             if (stageUniform.iteration == stageUniform.lastIteration) alph = diffuse.a;

            // transparency ray
            VtRay newray = ray; {
                vec3 vdir = dcts(ray.cdirect.xy), shift = vdir;
                newray.origin.xyz = fma(shift, shiftLenght.xxx, ray.origin.xyz);
                writeColor(newray.dcolor, vec4(dcolor.xyz * (1.f - alph).xxx, 1.f));
                vtReuseRays(newray, ucoord.xy, 0, rayID);
            }
            
            // create data for reflection rays
            vec3 vcolor = dcolor.xyz * alph.xxx; // visible ray color energy
            {
                 vec3 vdir = reflect(dcts(ray.cdirect.xy), hitp.normalHeight.xyz), shift = vdir;
                 vec3 orig = fma(shift, shiftLenght.xxx, ray.origin.xyz);
                 vec3 rcol = vcolor * reflc.xyz;

                ISTORE(OriginPass, icoord, vec4(orig, 1.f));
                ISTORE(NormalPass, icoord, vec4(vdir, 0.f));
                ISTORE(SpecularPass, icoord, vec4(rcol, reflc.w));
            }

            { // output color
                 vec3 outcolor = vcolor * (1.f.xxx - reflc.xyz);
                ISTORE(ColorOutput, icoord, vec4(fma(diffuse.xyz, outcolor.xyz, bcolor.xyz), 1.f));
            }
        }
    }

    LGROUP_BARRIER;
}
