#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/mathlib.glsl"
#include "../include/random.glsl"

// user descriptor set output image
layout ( rgba32f, binding = 2, set = 2 ) uniform image2D ColorOutput;

// use partition by 8x8
//layout (local_size_x = R_BLOCK_WIDTH, local_size_y = R_BLOCK_HEIGHT);
LOCAL_SIZE_LAYOUT;

#define wgs gl_NumWorkGroups.x
#define wsize rayTypedCounterRead[stageUniform.currentGroup]

#define hitp hitPayload[hitpId]
#define hit hits[hitIdc]

// 
void main() {
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    [[unroll, dependency_length(4)]]
    for (uint w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        int rayID = rayGroupIndicesRead[globalID*5+(stageUniform.currentGroup+1)]-1;
        bool overflow = globalID >= wsize || globalID < 0 || rayID < 0;

        // get ray by id
        VtRay ray = rays[rayID];//vtFetchRay(rayID);
        int hitIdc = vtFetchHitIdc(rayID);
        int hitpId = hits[hitIdc].payloadID-1;
        vec4 emisson = hitp.emission; //* vec4(1.f - hitp.specularGlossiness.xyz, 1.f);

        // get output image 2D coord
        uvec2 icoord = vtFetchIndex(rayID);

        // save result of ray tracing by ray saved indice
        //if (!overflow) { imageStore(ColorOutput, icoord, vec4(f16_f32(ray.dcolor).xyz, 1.f)); }
        
        // add support for multi-passing
        if (!overflow) {
            const vec4 bcolor = imageLoad(ColorOutput, ivec2(icoord));
            imageStore(ColorOutput, ivec2(icoord), vec4(fma(emisson.xyz, f16_f32(ray.dcolor).xyz, bcolor.xyz), 1.f));

            // debug
            //if (stageUniform.iteration == 1) imageStore(ColorOutput, ivec2(icoord), vec4(1.f, 0.f, 1.f, 1.f) * vec4(f16_f32(ray.dcolor).xyz, 1.f));
            //if (stageUniform.iteration == 1) imageStore(ColorOutput, ivec2(icoord), vec4(f16_f32(ray.dcolor).xyz * (fma(dcts(ray.cdirect.xy).xyz, 0.5f.xxx, 0.5f.xxx)), 1.f));

            // generate secondary rays (reflections)
            VtRay newray = ray;
            newray.origin.xyz = fma(dcts(newray.cdirect.xy), hit.uvt.zzz, newray.origin.xyz);
            newray.cdirect.xy = lcts(reflect(dcts(newray.cdirect.xy), hitp.normalHeight.xyz));
            writeColor(newray.dcolor, vec4(f16_f32(newray.dcolor).xyz * hitp.specularGlossiness.xyz, 1.f));
            
            // add ray error offset
            newray.origin.xyz = fma(dcts(newray.cdirect.xy), 5e-4f.xxx, newray.origin.xyz);
            vtReuseRays(newray, icoord.xy, 0, rayID);
            //vtEmitRays(newray, icoord.xy, 0);
        }
    }

    LGROUP_BARRIER;
}
