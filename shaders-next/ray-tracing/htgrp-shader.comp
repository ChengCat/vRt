#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/random.glsl"

// user descriptor set output image
layout ( rgba32f, binding = 2, set = 2 ) uniform image2D _devImages[1];
#define ColorOutput _devImages[0]

// use partition by 8x8
//layout (local_size_x = R_BLOCK_WIDTH, local_size_y = R_BLOCK_HEIGHT);
LOCAL_SIZE_LAYOUT;

#define wgs gl_NumWorkGroups.x
//#define wsize rayTypedCounterRead[stageUniform.currentGroup]

shared VtRay lrays[WORK_SIZE];
#define ray lrays[Local_Idx]
#define hit hits[hitIdc]
#define hitp hitPayload[hitpId]

// 
void main() {
    const int wsize = min(rayTypedCounterRead[stageUniform.currentGroup], MAX_RAYS);
    IFALL (wsize <= 0) return;

    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
     
    for (uint w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        //const int rayID = rayGroupIndicesRead[globalID*5+(stageUniform.currentGroup+1)]-1;
        const int rayID = rayGroupIndicesRead[globalID]-1;
        const bool overflow = globalID >= wsize || globalID < 0 || rayID < 0;

        // get ray by id
        ray = rays[rayID];
        const int hitIdc = vtFetchHitIdc(rayID);
        const int hitpId = hits[hitIdc].payloadID-1;
        vec4 emisson = hitp.emission, reflc = hitp.specularGlossiness;

        // get output image 2D coord
        uvec2 icoord = vtFetchIndex(rayID);

        // 
         if (!overflow) {
            const vec4 dcolor = vec4(f16_f32(ray.dcolor).xyz, 1.f), bcolor = imageLoad(ColorOutput, ivec2(icoord));
            ISTORE(ColorOutput, ivec2(icoord), vec4(fma(emisson.xyz, dcolor.xyz, bcolor.xyz), 1.f));

            // generate secondary rays (reflections)
            VtRay newray = ray;
            newray.origin.xyz = fma(dcts(newray.cdirect.xy), hit.uvt.zzz, newray.origin.xyz);
            writeColor(newray.dcolor, vec4(0.f.xxx, 1.f));

            // resolve ray emission
             
            if (max3_vec(f16_f32(newray.dcolor).xyz) >= 1e-4f) {
                vec3 vdir = dcts(newray.cdirect.xy), shift = hit.vdat.xyz;
                newray.origin.xyz = fma(faceforward(shift, -vdir, hit.vdat.xyz), (hit.uvt.z*1e-3f).xxx, newray.origin.xyz); // add ray error offset
                vtReuseRays(newray, icoord.xy, 0, rayID);
            }
        }
    }

    LGROUP_BARRIER;
}
