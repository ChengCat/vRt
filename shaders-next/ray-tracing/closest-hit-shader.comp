#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
//#define CACHE_HIT_PAYLOAD  // unpreferred
#define DMA_HIT

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/mathlib.glsl"
#include "../include/random.glsl"

// attribute formating
const int NORMAL_TID = 0;
const int TEXCOORD_TID = 1;
const int TANGENT_TID = 2;
const int BITANGENT_TID = 3;
const int VCOLOR_TID = 4;

struct VtAppMaterial {
     vec4 diffuse;
     vec4 specular;
     vec4 transmission;
     vec4 emissive;

     float ior;
     float roughness;
     float alpharef;
     float unk0f;

     uint diffuseTexture;
     uint specularTexture;
     uint bumpTexture;
     uint emissiveTexture;

     int flags;
     int alphafunc;
     int binding;
     int bitfield;
};

#include "../include/hit-lib.glsl"

// texturing cache 
struct Textured {
    vec4 diffuse;
    vec4 specular;
    vec4 bump;
    vec4 emissive;
} textured;

#define cray rays[rayID]

LOCAL_SIZE_LAYOUT;

#ifdef CACHE_HIT_PAYLOAD
shared VtHitPayload hitPayloadCache[WORK_SIZE];
#define hitp hitPayloadCache[Local_Idx]
#else
VtHitPayload hitp;
#endif



layout (binding = 0, set = 2, std430) readonly buffer VT_GEN_EXAMPLE {
    mat4x4 camInv;
    mat4x4 projInv;
    vec4 sceneRes;
    int enable360, variant, r1, r2;
} cameraUniform;


#define wgs gl_NumWorkGroups.x


void main() {
    const int wsize = min(closestHitTypedCounterRead[stageUniform.currentGroup], MAX_HITS);

    // constants
    const float IOR = 1.400f;
    const float diffuse_min_importance = 0.5f;
    const float reflect_min_importance = 0.5f;
    const vec3 max_fresnel_color = toLinear(vec3(1.f));
    const vec3 min_fresnel_color = toLinear(vec3(1.f));

    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    [[unroll, dependency_length(4)]]
    for (uint w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        bool overflow = globalID >= wsize || globalID < 0;
        const int hitID = overflow ? -1 : vtClosestId(globalID, stageUniform.currentGroup);
        IFALL(overflow) break;
        {
#ifdef DMA_HIT
            #define hit hits[hitID]
#else
            VtHitData hit = hits[hitID];
#endif

            const int rayID = hit.rayID-1;
            hitp = hitPayload[hit.payloadID-1];

            vec3 viewVec = dcts(cray.cdirect.xy), rorigin = cray.origin.xyz;
            globalInvocationSMP = globalID;

            matID = floatBitsToInt(hit.uvt.w);//hit.materialID;// - materialOffset;
            //bool overflow = overflow || rayID < 0 || (matID >= materialCount || matID < 0);
            bool overflow = overflow || rayID < 0;

            // static colors
            textured.diffuse = material.diffuse;
            textured.bump = vec4(0.f, 0.f, 1.f, 1.f);
            textured.specular = material.specular;
            textured.emissive = material.emissive;

            // AMD not supported per-lane texture data loading, if texture index is not constant
            vec2 texcoord = imageLoad(attributes, makeAttribID(hit.attribID, TEXCOORD_TID)).xy; //hit.attributes[TEXCOORD_TID].xy; //hit.texcoord.xy;
            vec3 normal = imageLoad(attributes, makeAttribID(hit.attribID, NORMAL_TID)).xyz; //hit.attributes[NORMAL_TID].xyz;
            vec3 bitang = imageLoad(attributes, makeAttribID(hit.attribID, BITANGENT_TID)).xyz; //hit.attributes[BITANGENT_TID].xyz;
            vec3 tangent = imageLoad(attributes, makeAttribID(hit.attribID, TANGENT_TID)).xyz; //hit.attributes[TANGENT_TID].xyz;

            // use HW intersected normal if something wrong
            float nlen = length(normal.xyz);
            normal.xyz = nlen <= 1e-5 ? hit.vdat.xyz : (normal.xyz/nlen);
            normal.xyz = faceforward(normal.xyz, normal.xyz, -hit.vdat.xyz);

            mat3 tbn = transpose(mat3(tangent.xyz, bitang.xyz, normal.xyz));
            vec3 pV = normalize(tbn * (-viewVec * hit.uvt.z));
            float hW = 0.f;

#ifdef ENABLE_POM
            texcoord = parallaxMapping(pV, texcoord, hW);
#endif
            textured.bump.xyz = getNormalMapping(texcoord);
            textured.diffuse = fetchDiffuse(texcoord);
            textured.specular = fetchSpecular(texcoord);
            textured.emissive = fetchEmission(texcoord);

            SB_BARRIER

            vec4 diffuse = textured.diffuse; //diffuse.xyz = toLinear(max(diffuse.xyz, vec3(0.f)));
            vec4 emission = textured.emissive; //emission.xyz = toLinear(max(emission.xyz, vec3(0.f)));
            vec4 spc = clamp01(textured.specular);

            
            // TODO: dynamic light
            const vec3 lightVector = normalize(vec3(0.1f, 1.f, 0.f));

            // default normal
            hitp.normalHeight.xyz = normal.xyz;

            // dim by light 
            diffuse.xyz *= clamp(fma(dot(hitp.normalHeight.xyz, lightVector), 0.5f, 0.5f), 0.f, 1.f);



            // convert metallic roughness to glossiness specular PBR model
            float roughness = clamp01(spc.y), metallic = clamp01(spc.z);
            float fresnel = clamp01(pow(abs(dot(dcts(cray.cdirect.xy), normal.xyz)), IOR - 1.f));

            vec3 fresnelColor = clamp01(fmix(max_fresnel_color * 0.9f, min_fresnel_color * 0.04f, fresnel.xxx));
            vec3 specularColor = clamp01(mix(fresnelColor, diffuse.xyz, metallic.xxx)); // use correct specular
            vec4 specularGlossiness = vec4(specularColor, roughness);
            
            //diffuse.xyz *= (1.f - metallic); // dim diffuse by metallic

            // normalize normal again
            hitp.normalHeight.xyz = normalize(hitp.normalHeight.xyz);
            hitp.emission = emission.xyzw;
            hitp.albedo = diffuse.xyzw;
            hitp.specularGlossiness = specularGlossiness;

            // triangle intersection test
            IFANY (cameraUniform.variant == 1) {
                //hitp.emission = vec4(vec3(0.5f, 0.5f, 1.0f), 1.f);
                //hitp.emission = vec4(hitp.normalHeight.xyz * 0.5f + 0.5f, 1.f);
                hitp.emission = vec4(hitp.albedo);
            } else {
                hitp.specularGlossiness = vec4(0.f);
                hitp.emission = vec4(imageLoad(attributes, makeAttribID(hit.attribID, VCOLOR_TID)).xyz, 1.f);
            }

            // additional validation of hit (hit point interpolated offset test)
            [[flatten]]
            if (!overflow && hit.rayID > 0) {
                const int pid = hitID; imageStore(rayLink, rayID<<1, (hitID+1).xxxx);

                hit.payloadID = pid+1;
#ifndef DMA_HIT
                hits[hitID] = hit;
#endif
                hitPayload[pid] = hitp;
            }
        }
    }
}
