#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DMA_HIT

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/random.glsl"


// sort alike "surface shaders" in Unity engines 
// getting only intersection material properties
// sending to next stage...


// attribute formating
const int NORMAL_TID = 0;
const int TEXCOORD_TID = 1;
const int TANGENT_TID = 2;
const int BITANGENT_TID = 3;
const int VCOLOR_TID = 4;

struct VtAppMaterial {
     vec4 diffuse;
     vec4 specular;
     vec4 transmission;
     vec4 emissive;

     float ior;
     float roughness;
     float alpharef;
     float unk0f;

     uint diffuseTexture;
     uint specularTexture;
     uint bumpTexture;
     uint emissiveTexture;

     int flags;
     int alphafunc;
     int binding;
     int bitfield;
};

#include "../include/hitlib.glsl"

// texturing cache 
struct Textured {
    vec4 diffuse;
    vec4 specular;
    vec4 bump;
    vec4 emissive;
} textured;

#define cray rays[rayID]

LOCAL_SIZE_LAYOUT;
VtHitPayload hitp;



layout (binding = 0, set = 2, std430) readonly buffer VT_GEN_EXAMPLE {
    mat4x4 camInv;
    mat4x4 projInv;
    vec4 sceneRes;
    int enable360, variant, r1, r2;
} cameraUniform;


#define wgs gl_NumWorkGroups.x


void main() {
    
    // constants
    const float IOR = 1.3333f, sIOR = IOR*IOR;
    const float diffuse_min_importance = 0.5f;
    const float reflect_min_importance = 0.5f;
    const vec3 max_fresnel_color = vec3(1.f);
    const vec3 min_fresnel_color = vec3(1.f);

    const int wsize = min(closestHitTypedCounterRead[stageUniform.currentGroup], MAX_HITS);
    IFALL (wsize <= 0) return;
    
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    
     
    for (uint w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        bool overflow = globalID >= wsize || globalID < 0;
        const int hitID = overflow ? -1 : vtClosestId(globalID, stageUniform.currentGroup);
        IFALL(overflow) break;
        {
#ifdef DMA_HIT
            #define hit hits[hitID]
#else
            VtHitData hit = hits[hitID];
#endif

            const int rayID = hit.rayID-1;
            hitp = hitPayload[hit.payloadID-1];
            globalInvocationSMP = globalID;

            matID = floatBitsToInt(hit.uvt.w);
            bool overflow = overflow || rayID < 0;

            // AMD not supported per-lane texture data loading, if texture index is not constant
            vec2 texcoord = imageLoad(attributes, makeAttribID(hit.attribID, TEXCOORD_TID)).xy;
            vec3 normal = imageLoad(attributes, makeAttribID(hit.attribID, NORMAL_TID)).xyz;
            vec3 bitang = imageLoad(attributes, makeAttribID(hit.attribID, BITANGENT_TID)).xyz;
            vec3 tangent = imageLoad(attributes, makeAttribID(hit.attribID, TANGENT_TID)).xyz;
            mat3 tbn = transpose(mat3(tangent.xyz, bitang.xyz, normal.xyz));

            const vec3 rdirect = dcts(cray.cdirect.xy);
            normal = faceforward(normal, rdirect, normal);

            // get textured data
            textured.bump.xyz = getNormalMapping(texcoord);
            textured.diffuse = fetchDiffuse(texcoord);
            textured.specular = fetchSpecular(texcoord);
            textured.emissive = fetchEmission(texcoord);

            vec4 diffuse = toLinear( textured.diffuse );

            // block TBN change manually if non valid normal mapped texture
            hitp.normalHeight.xyz = validateTexture(material.bumpTexture) ? (textured.bump.xyz * tbn) : normal.xyz; // apply TBN with normal mapping
            hitp.normalHeight.xyz = faceforward(hitp.normalHeight.xyz, rdirect, hitp.normalHeight.xyz);

            // if normal goes wrong, restore normal
            if (dot(hitp.normalHeight.xyz,hitp.normalHeight.xyz) < 1e-4 || any(isnan(hitp.normalHeight.xyz)) || any(isinf(hitp.normalHeight.xyz))) {
                hitp.normalHeight.xyz = normal.xyz;
            }

            // facing of normal
            hitp.normalHeight.xyz = normalize(hitp.normalHeight.xyz);
            hitp.normalHeight.xyz = faceforward(hitp.normalHeight.xyz, rdirect, hitp.normalHeight.xyz);

            // convert metallic roughness to glossiness specular PBR model
            const float fresnel = clamp01(pow(abs(dot(rdirect, normal.xyz)), sIOR - 1.f));
            const vec3 fresnelColor = toLinear(clamp01(fmix(max_fresnel_color * 0.9f, min_fresnel_color * 0.2f, fresnel.xxx)));
            const vec3 specularColor = clamp01(mix(fresnelColor, diffuse.xyz, textured.specular.zzz)); // use correct specular
            const vec4 specularGlossiness = vec4(specularColor, textured.specular.y);
            
            // TODO: dynamic light
            const vec3 lightVector = normalize(vec3(0.1f, 1.f, 0.f)), lightColor = toLinear(vec3(1.0f, 0.9f, 0.75f));
            hitp.albedo = (diffuse * vec4(  mix(lightColor*0.25f, lightColor*2.f, clamp(dot(hitp.normalHeight.xyz, lightVector), 0.f, 1.f).xxx)  , 1.f));
            hitp.albedo += vec4(textured.emissive.xyz, 0.f);
            hitp.emission = textured.emissive, hitp.specularGlossiness = specularGlossiness; // set emission and specularity
            
            // triangle intersection test
             IFANY (cameraUniform.variant == 1) {
                //hitp.emission = vec4(hitp.albedo) + vec4(hitp.emission.xyz, 0.f);
                //hitp.emission = vec4(fma(hitp.normalHeight.xyz,0.5f.xxx,0.5f.xxx),1.f);
                //hitp.specularGlossiness = vec4(0.f);
            } else {
                hitp.specularGlossiness = vec4(0.f);
                hitp.emission = vec4(toLinear(imageLoad(attributes, makeAttribID(hit.attribID, VCOLOR_TID)).xyz), 1.f);
            }

            // additional validation of hit (hit point interpolated offset test)
            uint comparable = ~0u;
             if (!overflow && rayID >= 0 && hitID >= 0) {
                const int pid = atomicIncPayloadHitCount();
                {
                    hit.payloadID = pid+1;
#ifndef DMA_HIT
                    hits[hitID] = hit;
#endif
                    hitPayload[pid] = hitp;
                }
            }
        }
    }
}
