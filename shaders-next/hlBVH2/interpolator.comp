#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define ENABLE_VERTEX_INTERPOLATOR
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/vertex.glsl"
#include "../include/morton.glsl"


LOCAL_SIZE_LAYOUT;

//#define wsize closestHitCounterCurrent

void main() {
    const int wsize = min(closestHitCounterCurrent, MAX_HITS);
    IFALL (wsize <= 0) return;

    // accumulate closest hits
    if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0) { atomicAdd(closestHitCounter, closestHitCounterCurrent); }
    SB_BARRIER

    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    [[unroll, dependency_length(4)]]
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        SB_BARRIER
        const int globalID = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = globalID >= wsize; IFALL(overflow) break;
        const int hitID = overflow ? -1 : vtClosestId(stageUniform.closestHitOffset + globalID, -1);
        
#ifdef DMA_HIT
        #define hit hits[hitID]
#else
        VtHitData hit = hits[hitID];
#endif

        [[flatten]] if (!overflow) { // verify intersection
            const int rayID = hit.rayID-1, triID = floatBitsToInt(hit.uvt.w)-1;

            // force set zero to hit index, and put minimal possible after (this index can be changed in hit shaders)
            //imageAtomicCompSwap(rayLink, rayID<<1, 0u, hitID+1), imageAtomicMin(rayLink, rayID<<1, hitID+1);
            imageAtomicMax(rayLink, rayID<<1, hitID+1); // reversed version

            // interpolate hit
            if (triID >= 0) {
                hit.uvt.w = intBitsToFloat(vmaterials[triID]);
                hit.vdat = TLOAD(lnrm, triID); // pick-up pre-computed physical normal
                interpolateMeshData(hit, triID);
#ifndef DMA_HIT
                hits[hitID] = hit;
#endif
            }

            const lowp uint rID = floatBitsToUint(hit.vdat.w);
            [[unroll]]
            for (int i=0;i<4;i++) {
                [[flatten]]
                if (rID == i) { vtVerifyClosestHit(hitID, i); break; }
            }
        }
    }

    //LGROUP_BARRIER;
}
