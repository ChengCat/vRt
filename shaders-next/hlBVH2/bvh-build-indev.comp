#version 460 core
#extension GL_GOOGLE_include_directive : enable

#ifdef FIRST_STEP
#define WORK_SIZE_BND 64
#else 
#define WORK_SIZE_BND 1024
#endif

#define BVH_BUILD
#define BVH_CREATION

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./submodules/includes.glsl"

layout ( local_size_x = WORK_SIZE_BND ) in;

// shared memory counters
initAtomicSubgroupIncFunctionTarget(vtCounters[WHERE], vtCountersInc, 1, int)
initAtomicSubgroupIncFunctionTarget(vtCounters[WHERE], vtCountersIncBoth, 2, int)
int cCounterInc() {return vtCountersInc(1);};
int cCounterIncBoth() {return vtCountersIncBoth(1);};


#define GSIZE bvhBlock.leafCount
#include "./submodules/bvh-build-general.glsl" // unified functions

void main() {
#ifdef FIRST_STEP // no support for steps
    if (Local_Idx == 0 && gl_WorkGroupID.x == 0) { 
        const int hid = 0; bvhMeta[hid+0] = (0).xxxx;
    }
#endif

    const uint 
        groupSize = gl_WorkGroupSize.x,
        groupOffset = groupSize * gl_WorkGroupID.x, 
        workSize = groupSize * gl_NumWorkGroups.x,
        threadID = Local_Idx,
        wsize = GSIZE-1;
    for (uint fT=groupOffset;fT<wsize;fT+=workSize) {
        const int uID = int(fT + threadID); IFALL (uID >= (wsize-1)) break;

        [[flatten]]
        if (uID < wsize) {
#ifdef FIRST_STEP
            splitNode2(uID);
#endif
        }
    }
}
