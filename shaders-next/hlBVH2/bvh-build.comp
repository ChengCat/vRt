#version 460 core
#extension GL_GOOGLE_include_directive : enable

#ifdef FIRST_STEP
#define WORK_SIZE_BND 64
#else 
#define WORK_SIZE_BND 1024
#endif

#define BVH_BUILD
#define BVH_CREATION

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"
#include "./submodules/includes.glsl"

// 0 and 4 reserved counters

// shared memory counters
shared int _counters[8];
#define cBuffer _counters[3]

// define function for increment
initAtomicSubgroupIncFunctionTarget(_counters[WHERE], _aCounterInc, 1, int)
initAtomicSubgroupIncFunctionTarget(vtCounters[WHERE], vtCountersInc, 1, int)
int lCounterInc() {return vtCountersInc(0)*2;};
int cCounterInc() {return vtCountersInc(1);};
int aCounterInc() {return _aCounterInc(cBuffer*4);}

uint rID(in uint t) {return gl_NumWorkGroups.x * t + gl_WorkGroupID.x;}
uint wID(in uint t) {return bvhBlock.leafCount * gl_WorkGroupID.x + t;}
uint mrQ(in uint t) {return bvhBlock.leafCount * 16u * t;}

#define asize_ _counters[(1-cBuffer)*4]
#define asize_inv_ _counters[cBuffer*4]
#define asize _counters[7]

#ifdef FIRST_STEP
#define osize asize
#define wsize asize
#else
#define osize _counters[6]
#define wsize _counters[5]
#endif

#define swapIn  _counters[1]
#define swapOut _counters[2]

#include "./submodules/bvh-build-general.glsl" // unified functions
layout ( local_size_x = WORK_SIZE_BND ) in;

// I have no idea for optimize registers
void main() {
#define threadID Local_Idx
#define groupSize gl_WorkGroupSize.x

    // lane-based
    const uint gS = groupSize >> 1, iT = threadID >> 1; const int sD = int(threadID & 1);

    LGROUP_BARRIER
    if (threadID < 8) { _counters[threadID] = 0; }
    LGROUP_BARRIER

    // create initial (root) node
    if (threadID == 0) {
#ifdef FIRST_STEP
        //int hid = lCounterInc();
        int hid = 0;
        imageStore(bvhMeta, hid+0, ivec4(1, bvhBlock.leafCount, 0, 0));
        imageStore(bvhMeta, hid+1, ivec4(0, 0, 0, 0));
        Actives[aCounterInc()] = hid+1;
#else
        cBuffer = 1, asize_inv_ = aCounter[  cBuffer], asize_ = aCounter[1-cBuffer];
#endif
    }
    
    // building BVH
    [[dependency_infinite]]
    for (int m=0;m<65536;m++) {
        LGROUP_BARRIER

#ifdef FIRST_STEP // limit by few elements
        if ( m >= 5 ) { break; }
#endif

        // swap buffers emulation
        if (threadID == 0) { 
                cBuffer = 1-cBuffer, asize_inv_ = 0, asize = atomicExchange(asize_, 0), swapIn = int(mrQ(1-cBuffer)), swapOut = int(mrQ(cBuffer));
#ifndef FIRST_STEP
                //wsize = asize * (m == 0 ? 1 : int(gl_NumWorkGroups.x)), osize = tiled(wsize, int(gl_NumWorkGroups.x));
                wsize = int(wID(asize)), osize = m == 0 ? asize : wsize;
#endif
        }
        
        LGROUP_BARRIER
        IFALL (asize <= 0) { break; } // remove count limiter

        // split nodes
        [[unroll, dependency_length(4)]]
        for (uint fT=0;fT<asize;fT+=gS) {
            // subgroup barrier
            SB_BARRIER

            // index of node element
            //const uint uID = fT + iT;
            const uint uWD = wID(fT + iT);

            [[flatten]]
            IFALL (uWD >= wsize) break; // split prefixed elements

            // get spared prefix
#ifndef FIRST_STEP
            const uint rWD = m == 0 ? rID(fT + iT) : uWD;
#else
            #define rWD uWD
#endif
            const int fID = rWD < osize ? Actives[swapIn+rWD]-1 : -1;
            [[flatten]] if (sD == 0 && rWD < osize) Actives[swapIn+rWD] = 0;

            // split sibling nodes
            [[flatten]]
            if (uWD < wsize && fID >= 0) { splitNode(fID, sD); }
        }
    }

    LGROUP_BARRIER

#ifdef FIRST_STEP
    if (threadID == 0) { aCounter[cBuffer] = asize_inv_, aCounter[1-cBuffer] = asize_; }
#endif
}
