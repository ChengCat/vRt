#version 460 core
#extension GL_GOOGLE_include_directive : enable

// THIS shader now not part of ray tracing pipeline - it part of BVH processing system

#define ENABLE_VERTEX_INTERPOLATOR
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING // store rays in registers if possible
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/structs.glsl"
#include "../include/morton.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/vertex.glsl"

//#define USE_STACKLESS_BVH
#include "./submodules/traverse-bvh2.glsl"

LOCAL_SIZE_LAYOUT;

#define cray rays[hit.rayID-1]

void main() {
    int wsize = rayCounter;//PREPARED_COUNT;
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 1000000);
    int wgs = int(gl_NumWorkGroups);
    cacheID = int(gl_GlobalInvocationID.x);

    LGROUP_BARRIER;
    for (int w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        int it = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x);
        bool_ overflow = bool_(it >= wsize);
        IFALL(overflow) break;

        // do BVH traversing 
        traverseBvh2(not(overflow), rays[it]);

        { // verify intersection
            const int triID = floatBitsToInt(geometrySpace.lastIntersection.w)-1;
            const int itri = triID*3;//tri*9;
            const mat3 vT = transpose(mat3(
                TLOAD(lvtx, itri+0).xyz,
                TLOAD(lvtx, itri+1).xyz,
                TLOAD(lvtx, itri+2).xyz
            ));

            const vec3 e1 = vT[1]-vT[0], e2 = vT[2]-vT[0];
            
            // make hit
            int hid = -1;
            bool_ vintersect = lessF(geometrySpace.lastIntersection.z, INFINITY-0.001f) & bool_(triID >= 0) & bool_(hid < 0).x | lessF(geometrySpace.lastIntersection.z, hits[hid].uvt.z);
            hid = atomicIncHitCount();

            // save hit
            HitData hit = hits[hid];
            hit.rayID = it+1;
            hit.uvt = geometrySpace.lastIntersection;
            hit.payloadID = 0;
            hit.materialID = materials[triID];
            hit.next = 0;
            hit.attributes[NORMAL_TID] = vec4(normalize(cross(e1, e2)), 1.f);
            currentRayTmp.origin.w = intBitsToFloat(hid+1);
            
            IF (vintersect) {
#ifdef ENABLE_VERTEX_INTERPOLATOR
                interpolateMeshData(hit);
#endif
                vtVerifyClosestHit(hid);
            } else {
                vtVerifyMissedHit(hid);
            }

            hits[hid] = hit;
        }

        // save ray state
        rays[it] = currentRayTmp;
    }

    LGROUP_BARRIER;
}
