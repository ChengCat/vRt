#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define VRT_USE_FAST_INTERSECTION
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define DISCARD_SHARED_CACHING
#define ENABLE_TRAVERSE_DATA
#define ENABLE_VSTORAGE_DATA
#define DMA_HIT

#define EXTEND_LOCAL_GROUPS

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/morton.glsl"
#include "../include/vertex.glsl"

#include "./submodules/traverse-bvh2.glsl"
#define wgs gl_NumWorkGroups.x

LOCAL_SIZE_LAYOUT;

void main() {
    const uint wsize = min(rayCounter, MAX_RAYS); IFALL (wsize <= 0) return;
    const uint wcount = min(tiled(wsize, gl_WorkGroupSize.x), 1000000u);
    //traverseState.cacheID = int(gl_GlobalInvocationID.x);
    traverseState.maxTriangles = bvhBlock.primitiveCount;
    
    for (uint w=0;w<wcount;w+=wgs) {
        const int it = int((w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x);
        const bool overflow = it >= wsize; IFALL(overflow) break;

        // do BVH traversing 
        const int rayID = vtRayIdx(it); int hid = vtFetchHitIdc(rayID);
        primitiveState.lastIntersection = vec4(0.f.xx, INFINITY, FINT_ZERO);

        // planned multiple-hits support
        [[flatten]] if (!overflow) { // verify intersection
            traverseBvh2(!overflow, hid, rays[rayID].origin.xyz, rays[rayID].cdirect.xy);
            const int triID = floatBitsToInt(primitiveState.lastIntersection.w)-1;
            const bool found = triID >= 0;
            if (hid < 0) hid = atomicIncHitCount(); // reserve one hit

#ifdef DMA_HIT
            #define hit hits[hid]
#else
            VtHitData hit;
#endif
            hit.payloadID = 0, hit.rayID = rayID+1;

            // if found as minimum one intersection
            [[flatten]] if (found) {
                if (hid < 0) hid = atomicIncHitCount(); // if required new
                hit.uvt = primitiveState.lastIntersection;
                hit.attribID = vtVerifyClosestHit(hid,-1)+1;
                imageAtomicMax(rayLink,rayID<<1, (hid+1).x);
            }
            
            // if no found any intersection
            // planned to add multi-traversing support, and another resolver
            [[flatten]] if (!found) {
                if (hid < 0) hid = atomicIncHitCount(); // if required new
                hit.uvt = vec4(0.f.xx, INFINITY, intBitsToFloat(-1));
                hit.attribID = 0; vtVerifyMissedHit(hid, 0);
                imageAtomicMax(rayLink,rayID<<1, (hid+1).x);
            }

#ifndef DMA_HIT
            hits[hid] = hit;
#endif
        }
    }

    //LGROUP_BARRIER;
}
