#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define VRT_USE_FAST_INTERSECTION
#define ENABLE_VSTORAGE_DATA
#define BVH_CREATION
#define LEAF_GEN

#ifndef INTEL_PLATFORM
#define PREFER_64BIT_MORTON_TYPE
#endif

#include "../../include/driver.glsl"
#include "../../include/mathlib.glsl"
#include "../../include/ballotlib.glsl"
#include "../../include/structs.glsl"
#include "../../include/vertex.glsl"
#include "../../include/morton.glsl"
#include "../submodules/includes.glsl"

LOCAL_SIZE_LAYOUT;

#define wsize bvhBlock.primitiveCount

void main() {
    const uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    [[unroll, dependency_length(4)]]
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        SB_BARRIER
        const uint globalID = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x;
        IFALL (globalID >= wsize) break;

        const uint tri = bvhBlock.primitiveOffset+clamp(globalID, 0, bvhBlock.primitiveCount-1); const int itri = int(tri*3);
        const mat3x4 trivertsUnit = mat3x4(
            divW(mult4(bvhBlock.transform, TLOAD(lvtxIn, itri+0).xyzw)),
            divW(mult4(bvhBlock.transform, TLOAD(lvtxIn, itri+1).xyzw)),
            divW(mult4(bvhBlock.transform, TLOAD(lvtxIn, itri+2).xyzw))
        );
        vec4 bcenter = vec4((trivertsUnit[0] + trivertsUnit[1] + trivertsUnit[2]).xyz * 0.33333333333333f, -1.f);
        //const mat3x4 triverts = mat3x4(TLOAD(lvtxIn, itri+0).xyzw,TLOAD(lvtxIn, itri+1).xyzw,TLOAD(lvtxIn, itri+2).xyzw);
        //bcenter.w = length(cross((trivertsUnit[1]-trivertsUnit[0]).xyz, (trivertsUnit[2]-trivertsUnit[0]).xyz))-1.f;
        
        #define triverts trivertsUnit
        const bbox_t lbox = calcTriBox(triverts);
        bcenter.w = fma(sqrt(dot(lbox.mx-lbox.mn,lbox.mx-lbox.mn) * 0.08333333333333333f), 2.0f, -1.f);

        {
#ifndef VRT_USE_FAST_INTERSECTION
            const mat4x3 triverts = transpose(triverts);
            imageStore(lvtx, itri+0, vec4(triverts[0].xyz, 1.f)), imageStore(lvtx, itri+1, vec4(triverts[1].xyz, 1.f)), imageStore(lvtx, itri+2, vec4(triverts[2].xyz, 1.f));
#else
#ifdef VTX_USE_LEGACY_METHOD
            imageStore(lvtx, itri+0, triverts[0]), imageStore(lvtx, itri+1, triverts[1]), imageStore(lvtx, itri+2, triverts[2]);
#else
            // experimental coordinate transform of triangle
            // http://jcgt.org/published/0005/03/03/paper.pdf
            
            // triangle elements
            const mat3 vc = mat3(triverts[0].xyz, triverts[1].xyz, triverts[2].xyz);
            const vec3 e1 = triverts[1].xyz - triverts[0].xyz, e2 = triverts[2].xyz - triverts[0].xyz;
            const vec3 n = cross(e1, e2), ni = 1.f/n, na = abs(n);
            
            // pre-calculate vectors
            const vec3 v0n = -dot(vc[0], n).xxx*ni, v1n = cross(vc[0], vc[1])*ni, v2n = cross(vc[2], vc[0])*ni;
            const vec3 e2d = e2.zxy*ni, e2m = -e2.yzx*ni, e1d = e1.yzx*ni, e1m = -e1.zxy*ni;
            const vec3 n1f = n.yzx*ni, n2f = n.zxy*ni;
            
            mat4x3 TVI = { vec3(0.f, 0.f, 0.f), vec3(0.f, 0.f, 0.f), vec3(0.f, 0.f, 0.f), vec3(0.f, 0.f, 0.f) };
            if ( na.x > na.y && na.x > na.z ) {
                TVI[0] = vec3(0.f,0.f,1.f);
                TVI[1] = vec3(e2d.x,e1m.x,n1f.x);
                TVI[2] = vec3(e2m.x,e1d.x,n2f.x);
                TVI[3] = vec3(v2n.x,v1n.x,v0n.x);
            } else 
            if ( na.y > na.z ) {
                TVI[0] = vec3(e2m.y,e1d.y,n2f.y);
                TVI[1] = vec3(0.f,0.f,1.f);
                TVI[2] = vec3(e2d.y,e1m.y,n1f.y);
                TVI[3] = vec3(v2n.y,v1n.y,v0n.y);
            } else 
            if ( na.z > 0.f ) {
                TVI[0] = vec3(e2d.z,e1m.z,n1f.z);
                TVI[1] = vec3(e2m.z,e1d.z,n2f.z);
                TVI[2] = vec3(0.f,0.f,1.f);
                TVI[3] = vec3(v2n.z,v1n.z,v0n.z);
            }
            
            // get transposed version (for full-filling)
            const mat3x4 TVIt = transpose(TVI);
            imageStore(lvtx, itri+0, TVIt[0]), imageStore(lvtx, itri+1, TVIt[1]), imageStore(lvtx, itri+2, TVIt[2]);
#endif
#endif
        }

#ifdef USE_MORTON_32
        const uint mortonCode = encodeMorton(packSnorm4x8(bcenter));
#else
        const uvec2 mortonCode = encodeMorton(uvec2(packSnorm2x16(bcenter.xy), packSnorm2x16(bcenter.zw)));
#endif

#define to globalID

        { // pre-compute normals
            const vec3 v0 = TLOAD(lvtxIn, itri+0).xyz; const uint rID = parameteri(VTX_TYPE, uint(vbitfields[tri]));
            imageStore(lnrm, int(tri), vec4(normalize(cross(TLOAD(lvtxIn, itri+1).xyz-v0, TLOAD(lvtxIn, itri+2).xyz-v0)), uintBitsToFloat(rID)));
        }

        // store leaf data
        [[flatten]]
        if (globalID < wsize && globalID >= 0) {
            Leafs[to].lbox = lbox, Leafs[to].pdata = ivec4(to.xx, 0, tri+1);
            Mortoncodes[to] = mortonCode;
            MortoncodesIndices[to] = int(to+1);
        }
    }

    LGROUP_BARRIER
}
