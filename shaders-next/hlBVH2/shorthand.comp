#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define VTX_TRANSPLIT
#define ENABLE_VSTORAGE_DATA
#define BVH_CREATION
#define LEAF_GEN

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
//#include "../include/vertex.glsl"
#include "../include/morton.glsl"


// bvh uniform unified
layout ( std430, binding = 0, set = 1 ) buffer bvhBlockB { 
    mat4x4 transform;
    mat4x4 transformInv;
    mat4x4 projection;
    mat4x4 projectionInv;
    int leafCount, primitiveCount, r1, r2;
} bvhBlock;

layout ( std430, binding = 9, set = 0 ) readonly buffer minmaxB { vec4 minmax[]; };


LOCAL_SIZE_LAYOUT;

void main() {
    vec4 gmn = vec4(100000.f), gmx = vec4(-100000.f);

    [[unroll, dependency_length(4)]]
    for (uint I=0u;I<256u;I+=Wave_Size) {
        const uint it = I + Lane_Idx;
        gmn = min(gmn, subgroupMin(minmax[it*2+0]));
        gmx = max(gmx, subgroupMax(minmax[it*2+1]));
    }

    [[flatten]]
    if (electedInvoc()) {
        const vec4 scale = 1.f/(gmx-gmn), offset = -scale*gmn;
        //const mat4 transform = transpose(bvhBlock.transform);
        //const mat4 transform = mat4(1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 0.f, 0.f, 0.f, 1.f);

        const mat4 translate = mat4(
            1.f, 0.f, 0.f, 0.f,
            0.f, 1.f, 0.f, 0.f,
            0.f, 0.f, 1.f, 0.f,
            offset.x, offset.y, offset.z, 1.f
        );

        const mat4 scaling = mat4(
            scale.x, 0.f, 0.f, 0.f,
            0.f, scale.x, 0.f, 0.f,
            0.f, 0.f, scale.z, 0.f,
            0.f, 0.f, 0.f, 1.f
        );

        const mat4 centric = mat4(
             1.f,  0.f,  0.f, 0.f,
             0.f,  1.f,  0.f, 0.f,
             0.f,  0.f,  1.f, 0.f,
            -1.f, -1.f, -1.f, 1.f
        )*mat4(
            2.f, 0.f, 0.f, 0.f,
            0.f, 2.f, 0.f, 0.f,
            0.f, 0.f, 2.f, 0.f,
            0.f, 0.f, 0.f, 1.f
        );

        const mat4 rtransform = mat4(
            1.f, 0.f, 0.f, 0.f,
            0.f, 1.f, 0.f, 0.f,
            0.f, 0.f, 1.f, 0.f,
            0.f, 0.f, 0.f, 1.f
        ) * centric * translate * scaling; //* transform;

        bvhBlock.transform = transpose(rtransform);
        bvhBlock.transformInv = transpose(inverse(rtransform));
    }

}