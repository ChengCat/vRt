#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define ENABLE_VSTORAGE_DATA
#define BVH_CREATION
#define LEAF_GEN

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/morton.glsl"

// bvh uniform unified
layout ( binding = 0, set = 1, std430 ) buffer bvhBlockB { 
    mat4x4 transform;
    mat4x4 transformInv;
    mat4x4 projection;
    mat4x4 projectionInv;
    int leafCount, primitiveCount, entryID, primitiveOffset;
    vec4 sceneMin, sceneMax;
} bvhBlock;

layout ( std430, binding = 9, set = 0 ) readonly buffer minmaxB { vec4 minmax[]; };

LOCAL_SIZE_LAYOUT;

void main() {
    vec4 gmn = INFINITY.xxxx, gmx = -INFINITY.xxxx;

    // calculate box boundary of scene 
    [[unroll]]
    for (uint I=0u;I<256u;I+=Wave_Size_RT) { SB_BARRIER
        const uint it = I + Lane_Idx;
        gmn = min(gmn, subgroupMin(minmax[it*2+0]));
        gmx = max(gmx, subgroupMax(minmax[it*2+1]));
    }
    LGROUP_BARRIER

    // these operations calculating only on one ALU, so can be used more precised point
    // also, it no require so much free registers
    [[flatten]] if (electedInvoc()) {
        const mat4 inversedpj = inverse(mat4(transpose(bvhBlock.projection))); // set inversed version of projection
        bvhBlock.projectionInv = transpose(mat4(inversedpj)), bvhBlock.sceneMin = gmn, bvhBlock.sceneMax = gmx;

        // transform to unit-box space coordinates ( may to be deprecated )
        const vec4 scale = 1.0f.xxxx/max(vec4(gmx)-vec4(gmn), 1e-5.xxxx), offset = -vec4(gmn)*scale;
        const mat4 inbox = mat4( 1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, offset.x, offset.y, offset.z, 1.f) * 
                           mat4( scale.x, 0.f, 0.f, 0.f, 0.f, scale.y, 0.f, 0.f, 0.f, 0.f, scale.z, 0.f, 0.f, 0.f, 0.f, 1.f);

        // transform from [0..1] to [-1..+1]
        const mat4 centric = mat4( 1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, -1.f, -1.f, -1.f, 1.f) * 
                             mat4( 2.f, 0.f, 0.f, 0.f, 0.f, 2.f, 0.f, 0.f, 0.f, 0.f, 2.f, 0.f,  0.f,  0.f,  0.f, 1.f);

        { // unit-box of scene bound projection ( may to be deprecated )
            const mat4 rtransform = ((centric * inbox)*(bvhBlock.projection));
            bvhBlock.transform = transpose(mat4(rtransform));
            bvhBlock.transformInv = transpose(mat4(inverse(rtransform)));

            // experimental copy to transform matrix
            //bvhBlock.transform = bvhBlock.projection;
            //bvhBlock.transformInv = bvhBlock.projectionInv;
        }
    }
}
