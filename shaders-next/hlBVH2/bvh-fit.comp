#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define WORK_SIZE_BND 1024
#define BVH_CREATION

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/structs.glsl"
#include "../include/vertex.glsl"
#include "../include/ballotlib.glsl"
#include "./submodules/includes.glsl"

// optimize by shareds
void unifyNodeBox(inout int idx) {
    // initial for unify box
    ivec2 comp = bvhNodes[idx].meta.xy-1;
    if (comp.x != comp.y && comp.x >= 0) {

        // get contributors boxes
        mat4 lrbox = mat4(bvhBoxesWork[comp.x][0], bvhBoxesWork[comp.x|1][0], bvhBoxesWork[comp.x][1], bvhBoxesWork[comp.x|1][1]);

        // contribute to current node
        bvhBoxesWork[idx] = vec4[2](min(lrbox[0], lrbox[1]), max(lrbox[2], lrbox[3]));

        // transposed save
        lrbox = transpose(lrbox), bvhNodes[idx].cbox = 
#ifdef USE_F32_BVH
            fvec4_[3](fvec4_(lrbox[0]), fvec4_(lrbox[1]), fvec4_(lrbox[2]));
#else
            uvec2[3](packHalf4x16(lrbox[0]*N1024), packHalf4x16(lrbox[1]*N1024), packHalf4x16(lrbox[2]*N1024));
#endif
    }
}

layout ( local_size_x = WORK_SIZE_BND ) in;

#define lID Local_Idx
#define gS gl_WorkGroupSize.x
#define wsize bvhBlock.leafCount

// referable value
const int _NULL = -1;

void main() {
    // move to work list
    const uint rng = gS*gl_NumWorkGroups.x;
    [[unroll, dependency_length(4)]]
    for (uint w=gS*gl_WorkGroupID.x;w<wsize;w+=rng) {
        SB_BARRIER
        const uint globalID = (w + lID);
        IFALL (globalID >= wsize) break; // add to queue list parent node
        int idx = globalID < wsize ? LeafIndices[globalID]-1 : -1;

        [[dependency_infinite]]
        for (int l=0;l<65536;l++) {
            SB_BARRIER
            [[flatten]] if ( idx < 0 || idx == _NULL ) { break; };
            SB_BARRIER
            const int pid = (idx >= 0 ? bvhNodes[idx].meta.z : 0)-1; idx = _NULL;
            [[flatten]] if ( pid >= 0 ) { idx = atomicCompSwap(Flags[pid], 0, 1) == 1 ? pid : _NULL; } else { idx = _NULL; };
            [[flatten]] if ( idx >= 0 ) { unifyNodeBox(idx); Flags[idx] = 0; };// else { break; };
        }
    }
    //LGROUP_BARRIER
}
