#version 460 core
#extension GL_GOOGLE_include_directive : enable

//#define EXTEND_LOCAL_GROUPS
#define VERTEX_FILLING
//#define USE_PUSH_CONSTANT

#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"
#include "../include/structs.glsl"
#include "../include/vertex.glsl"
#include "../include/vertex-input.glsl"

LOCAL_SIZE_LAYOUT;

const int VCOUNT = 3;

#define wsize vertexBlock.primitiveCount

void main() {
    IFALL (wsize <= 0) return; uint wcount = min(tiled(uint(wsize), gl_WorkGroupSize.x), 1000000u);
    for (uint w=0;w<wcount;w+=gl_NumWorkGroups.x) {
        uint globalID = (w + gl_WorkGroupID.x) * gl_WorkGroupSize.x + gl_LocalInvocationID.x; IFALL (globalID >= wsize) break;
        if (globalID < wsize && globalID >= 0) {
            // constant material ID from vertex instance
            uint rofft = uint(vertexBlock.readOffset) + globalID, wofft = uint(vertexBlock.primitiveOffset) + globalID;

            // read material accessor
            uint matID = 0u;
            readByAccessorIndice(int(vertexBlock.materialAccessor), rofft, matID);
            matID += uint(vertexBlock.materialID);

            // planned to support quad based geometry
            vmaterials[wofft] = int(matID);
            vbitfields[wofft] = vertexBlock.bitfield;

            // load vertex data
            [[unroll]] for (int i=0;i<3;i++) {
                vec4 vertice = vec4(0.f, 0.f, 0.f, 1.f); uint indiceID = rofft * VCOUNT + i;
                readByAccessorIndice(int(vertexBlock.indiceAccessor), indiceID, indiceID);
                readByAccessor(int(vertexBlock.verticeAccessor), indiceID, vertice);
                storePosition(ivec2(wofft, i), vec4(vertice.xyz, 1.f));
            }

            // load attrib data
            for (uint a=vertexBlock.attributeOffset;a<min(min(ATTRIB_EXTENT, attributes.length()), vertexBlock.attributeCount)+vertexBlock.attributeOffset;a++) {
                int ai = attributes[a].attributeID;
                [[unroll]] for (int i=0;i<3;i++) {
                    vec4 attribValue = vec4(0.f); uint indiceID = rofft * VCOUNT + i;
                    readByAccessorIndice(int(vertexBlock.indiceAccessor), indiceID, indiceID);
                    readByAccessor(attributes[a].accessorID, indiceID, attribValue);
                    storeAttribute(ivec3(wofft, ai, i), attribValue);
                }
                storeAttribute(ivec3(wofft, ai, 3), 0.f.xxxx);
            }

            { // pre-compute normals
                 vec3 v0 = TLOAD(lvtxIn, int(wofft)*3+0).xyz;
                ISTORE(lnrm, int(wofft), vec4(normalize(cross(TLOAD(lvtxIn, int(wofft)*3+1).xyz-v0, TLOAD(lvtxIn, int(wofft)*3+2).xyz-v0)), uintBitsToFloat(parameteri(VTX_TYPE, uint(vbitfields[wofft])))));
            }
        }
    }
}
