#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;

shared uint localHistogram[RADICES];

// wide of 128 elements
shared uint_rdc_wave_lcm _data[64];

#define key _data[Lane_Idx]

initSubgroupIncFunctionTargetDual(localHistogram[WHERE], countOffset, 1, uint, uvec2)


void main() {
    Local_Idx = gl_LocalInvocationID.x;
    Wave_Idx = gl_LocalInvocationID.x / Wave_Size_RT;
    Lane_Idx = gl_LocalInvocationID.x % Wave_Size_RT;
    Radice_Idx = gl_WorkGroupID.y + Wave_Idx * gl_NumWorkGroups.y;

    // set prefix sum (planned distribute threads) 
    [[unroll]]
    for (uint rk=0;rk<RADICES;rk+=WRK_SIZE_RT) {
        uvec_wave radice = uvec_wave(rk + Radice_Idx);
        localHistogram[radice] = PrefixSum[radice + gl_WorkGroupID.x * RADICES];
    }
    
    LGROUP_BARRIER

    // calculate blocks
    blocks_info blocks = get_blocks_info(push_block.NumKeys);
    uint bcount = min(tiled(blocks.count, 2u), 524288u);
    WPTR2 addr = WPTR(blocks.offset).xx + WPTR2(Lane_Idx, Wave_Size_RT + Lane_Idx);

    for ( uint wk = 0; wk < bcount; wk++ ) {
        bvec2_wave validAddress = lessThan(addr, blocks.limit.xx);
        IFALL(all(not(validAddress))) break;

        if (Wave_Idx == 0) {
            if (push_block.Shift == 0) {
                key = p2x(uvec2(
                    BFE(validAddress.x ? KeyIn[addr.x] : KEYTYPE(0xFFFFFFFFu.xx), (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS),
                    BFE(validAddress.y ? KeyIn[addr.y] : KEYTYPE(0xFFFFFFFFu.xx), (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS)
                    //validAddress.x ? BFE(KeyIn[addr.x], (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS) : RADICES_MASK,
                    //validAddress.y ? BFE(KeyIn[addr.y], (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS) : RADICES_MASK
                ));
            } else {
                key = p2x(uvec2(
                    BFE(validAddress.x ? KeyTmp[addr.x] : KEYTYPE(0xFFFFFFFFu.xx), (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS),
                    BFE(validAddress.y ? KeyTmp[addr.y] : KEYTYPE(0xFFFFFFFFu.xx), (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS)
                    //validAddress.x ? BFE(KeyTmp[addr.x], (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS) : RADICES_MASK,
                    //validAddress.y ? BFE(KeyTmp[addr.y], (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS) : RADICES_MASK
                ));
            }
        }
        LGROUP_BARRIER

        // WARP-optimized histogram calculation
        for (uint rk=0u;rk<RADICES;rk+=WRK_SIZE_RT) {
            uvec_wave radice = uvec_wave(rk + Radice_Idx);
            bvec2 owned = and(equal(up2x(key), radice.xx), validAddress);
            if (any(owned)) {
                WPTR2 offset = WPTR2(countOffset(uint(radice), owned));
                if (owned.x) { ValueTmp[offset.x] = ValueIn[addr.x], KeyTmp[offset.x] = KeyIn[addr.x]; }
                if (owned.y) { ValueTmp[offset.y] = ValueIn[addr.y], KeyTmp[offset.y] = KeyIn[addr.y]; }
            }
            IFALL (all(or((radice >= RADICES).xx, or(owned, not(validAddress))))) break;
        }

        addr += Wave_Size_RT<<1;
    }

    LGROUP_BARRIER
}
