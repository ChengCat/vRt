#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define DISCARD_SHARED_CACHING
#define USE_SINGLE_THREAD_RAY_MANAGMENT
#define SIMPLIFIED_RAY_MANAGMENT
#define CACHE_HIT_PAYLOAD
//#define DMA_HIT // unpreferred

#include "../include/driver.glsl"
#include "../include/structs.glsl"
#include "../include/rayslib.glsl"
#include "../include/mathlib.glsl"
#include "../include/random.glsl"

#include "./submodules/environment.glsl"


struct VtAppMaterial {
     vec4 diffuse;
     vec4 specular;
     vec4 transmission;
     vec4 emissive;

     float ior;
     float roughness;
     float alpharef;
     float unk0f;

     uint diffuseTexture;
     uint specularTexture;
     uint bumpTexture;
     uint emissiveTexture;

     int flags;
     int alphafunc;
     int binding;
     int bitfield;
};


#define SETS_DESC_SET_ID 1
const uint MAX_TEXTURES = 64, MAX_SAMPLERS = 16;


// textrue/sampler set
layout ( binding = 0, set = SETS_DESC_SET_ID ) uniform texture2D textures[MAX_TEXTURES];
layout ( binding = 1, set = SETS_DESC_SET_ID ) uniform sampler samplers[MAX_SAMPLERS];

// material set (in main descriptor set)
layout ( std430, binding = 2, set = SETS_DESC_SET_ID ) readonly buffer VT_MATERIAL_BUFFER { VtAppMaterial submats[]; };
layout ( std430, binding = 3, set = SETS_DESC_SET_ID ) readonly buffer VT_COMBINED { uvec2 vtexures[]; };

layout ( std430, binding = 4, set = SETS_DESC_SET_ID ) readonly buffer VT_MATERIAL_INFO {
    uint materialCount;
    uint materialOffset;
};


int matID = -1;
//#define material submats[matID]

// custom defined miss material
VtAppMaterial missMaterial;
#define material missMaterial

struct Textured {
    vec4 diffuse;
    vec4 specular;
    vec4 bump;
    vec4 emissive;
} textured;

#define cray rays[rayID]//rayBlockNodes[rayID / R_BLOCK_SIZE][rayID % R_BLOCK_SIZE].data

LOCAL_SIZE_LAYOUT;

#ifdef CACHE_HIT_PAYLOAD
shared VtHitPayload hitPayloadCache[WORK_SIZE];
#endif

void main() {

    // constants
    const float IOR = 1.400f;
    const float diffuse_min_importance = 0.5f;
    const float reflect_min_importance = 0.5f;
    const vec3 max_fresnel_color = toLinear(vec3(1.f));
    const vec3 min_fresnel_color = toLinear(vec3(1.f));

    int wsize = int(missHitCounter);
    int wcount = min(tiled(wsize, int(gl_WorkGroupSize.x)), 1000000);
    bool overflow = false;
    int wgs = int(gl_NumWorkGroups);
    int rayID = -1;
    
    for (int w=0;w<wcount;w+=wgs) {
        SB_BARRIER
        int globalID = (w + int(gl_WorkGroupID.x)) * int(gl_WorkGroupSize.x) + int(gl_LocalInvocationID.x);
        bool overflow = overflow || globalID >= wsize || globalID < 0;
        int hitID = overflow ? -1 : vtMissId(globalID);

        IFALL(overflow) break;
        {
#ifdef DMA_HIT
            #define hit hits[hitID]
#else
            VtHitData hit = hits[hitID];
#endif
            rayID = hit.rayID-1;

#ifdef CACHE_HIT_PAYLOAD
            #define hitp hitPayloadCache[Local_Idx]
            hitp = hitPayload[hit.payloadID-1];
#else
            HitPayload hitp = hitPayload[hit.payloadID-1];
#endif

            vec3 viewVec = dcts(cray.cdirect.xy);
            vec3 rorigin = cray.origin.xyz;
            globalInvocationSMP = globalID;

            matID = -1;//hit.materialID;// - materialOffset;
            //bool overflow = overflow || rayID < 0 || (matID >= materialCount || matID < 0);
            bool overflow = overflow || rayID < 0;

            // static colors
            textured.diffuse = material.diffuse;
            textured.bump = vec4(0.f, 0.f, 1.f, 1.f);
            textured.specular = material.specular;
            textured.emissive = material.emissive;

            // AMD not supported per-lane texture data loading, if texture index is not constant
            vec2 texcoord = hit.attributes[TEXCOORD_TID].xy; //hit.texcoord.xy;
            vec3 normal = hit.attributes[NORMAL_TID].xyz;
            vec3 bitang = hit.attributes[BITANGENT_TID].xyz;
            vec3 tangent = hit.attributes[TANGENT_TID].xyz;

            mat3 tbn = transpose(mat3(tangent.xyz, bitang.xyz, normal.xyz));
            vec3 pV = normalize(tbn * (-viewVec * hit.uvt.z));
            float hW = 0.f;

            vec4 diffuse = textured.diffuse; diffuse.xyz = toLinear(max(diffuse.xyz, vec3(0.f)));
            vec4 emission = textured.emissive; emission.xyz = toLinear(max(emission.xyz, vec3(0.f)));
            vec4 spc = clamp01(textured.specular);

            // default normal
            hitp.normalHeight.xyz = normal.xyz;

            // if normal goes wrong, restore normal
            if ((length(hitp.normalHeight.xyz) <= 1e-5) || (length(hitp.normalHeight.xyz) >= INFINITY) || any(isnan(hitp.normalHeight.xyz)) || any(isinf(hitp.normalHeight.xyz)) || dot(hitp.normalHeight.xyz, normal.xyz) <= 1e-5) {
                hitp.normalHeight.xyz = normal.xyz;
            }

            // convert metallic roughness to glossiness specular PBR model
            normal.xyz = faceforward(normal.xyz, dcts(cray.cdirect.xy), normal.xyz);
            float roughness = clamp01(spc.y), metallic = clamp01(spc.z);
            float fresnel = clamp01(pow(abs(dot(dcts(cray.cdirect.xy), normal.xyz)), IOR - 1.f));

            vec3 fresnelColor = clamp01(fmix(max_fresnel_color * 0.9f, min_fresnel_color * 0.04f, fresnel.xxx));
            vec3 specularColor = clamp01(mix(fresnelColor, diffuse.xyz, metallic.xxx)); // use correct specular
            diffuse.xyz *= (1.f - metallic); // dim diffuse by metallic
            vec4 specularGlossiness = vec4(specularColor, roughness);

            // normalize normal again
            hitp.normalHeight.xyz = normalize(hitp.normalHeight.xyz);
            hitp.emission = emission.xyzw;
            hitp.albedo = diffuse.xyzw;
            hitp.specularGlossiness = specularGlossiness;


            // environment
            hitp.specularGlossiness = vec4(0.f.xxx, 1.f);
            hitp.albedo = vec4(0.f.xxx, 1.f);
            EnvironmentShader(hitp.emission, cray);
            
            // ray direction debug emission
            hitp.emission = vec4(viewVec*0.5f+0.5f, 1.f);

            // additional validation of hit (hit point interpolated offset test)
            if (!overflow && hitID >= 0) {
                int pid = hit.payloadID-1;
                if (pid < 0) pid = hitID;//atomicIncPayloadHitCount();
                hitPayload[pid] = hitp;

                // make payload ID
                if (hit.payloadID <= 0) {
                    hit.payloadID = pid+1;
#ifndef DMA_HIT
                    hits[hitID] = hit;
#endif
                }
            }
        }
    }
}
