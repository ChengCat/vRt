#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;

shared uint localHistogram[RADICES];

// wide of 128 elements, each element should be in uint16_t, but for compatibility used uint32_t
shared highp uint_rdc_wave_lcm _data[Wave_Size];
#define key _data[Lane_Idx]

initSubgroupIncFunctionTargetDual(localHistogram[WHERE], countHistogram, 1, uint, uvec2)


void main() {
    const uint Radice_Idx = gl_WorkGroupID.y * Wave_Count_RX + Wave_Idx;
    //const uint Radice_Idx = gl_WorkGroupID.y + Wave_Idx * gl_NumWorkGroups.y;

    // clear histogram of block (planned distribute threads)
    [[unroll]]
    for (uint rk=0u;rk<RADICES;rk+=WRK_SIZE_RT) {
        const uint radice = uint(rk + Radice_Idx);
        if (radice < RADICES) localHistogram[radice] = 0;
    }
    LGROUP_BARRIER

    // use SIMD lanes for calculate histograms
    const blocks_info blocks = get_blocks_info(push_block.NumKeys);
    const uint bcount = min(tiled(blocks.count, 2u), 524288u);
    WPTR2 addr = WPTR(blocks.offset).xx + WPTR2(Lane_Idx, Wave_Size_RT + Lane_Idx);

    [[unroll, dependency_length(4)]]
    for ( uint wk = 0; wk < bcount; wk++ ) {
        bvec2 validAddress = lessThan(addr, blocks.limit.xx);
        IFALL(all(not(validAddress))) break;

        if (Wave_Idx == 0) {
            key = uint_rdc_wave_lcm(p2x_8(uvec2(
            //key = (p2x_8(uvec2(
                BFE(validAddress.x ? KeyIn[addr.x] : KEYTYPE(0xFFFFFFFFu.xx), (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS),
                BFE(validAddress.y ? KeyIn[addr.y] : KEYTYPE(0xFFFFFFFFu.xx), (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS)
                //validAddress.x ? BFE(KeyIn[addr.x], (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS) : RADICES_MASK,
                //validAddress.y ? BFE(KeyIn[addr.y], (push_block.Shift)*BITS_PER_PASS, BITS_PER_PASS) : RADICES_MASK
            )));
        }
        LGROUP_BARRIER

        // WARP-optimized histogram calculation
        [[unroll]]
        for (uint rk=0u;rk<RADICES;rk+=WRK_SIZE_RT) {
            const uint radice = uint(rk + Radice_Idx);
            const bvec2 owned = and(equal(up2x_8(key), radice.xx), validAddress);
            if (any(owned)) countHistogram(uint(radice), owned);
            IFALL (all(or((radice >= RADICES).xx, or(owned, not(validAddress))))) break;
        }

        LGROUP_BARRIER
        addr += Wave_Size_RT << 1;
    }

    // resolve histograms (planned distribute threads) 
    LGROUP_BARRIER

    [[unroll]]
    for (uint rk=0u;rk<RADICES;rk+=WRK_SIZE_RT) {
        const uint radice = uint(rk + Radice_Idx);
        if (radice < RADICES) {
            PrefixSum[radice + RADICES * gl_WorkGroupID.x] = localHistogram[radice];
            Histogram[radice + RADICES * gl_WorkGroupID.x] = localHistogram[radice];
        }
    }

    //LGROUP_BARRIER
}
